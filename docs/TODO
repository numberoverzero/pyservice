TODO
========================

Project:
    1) Refactor entire layout:
        pyservice
            |
            |- __init__.py
            |- service.py
            |- client.py
            |- description.py
            |- validation.py
            |- layer.py
    2) Move to JSON-RPC 2.0
    3) Refactor exceptions to live on client/service:
        try:
            print client.get_task(task_id)
        except client.exceptions.UnknownTaskId as e:
            print e

Documentation:
    docstrings for all top-level classes
    Intro/walkthrough (see bottle.py)

Description file:
    Formal specification of format
    Support input/ouput shorthand:
        {
            "name": "ServiceName",
            "operations": [
                {
                    "name": "OperationName",
                    "input": "username",
                    "output": "userid"
                }
            ]
        }
    Support input/output metadata:
        {
            "name": "ServiceName",
            "operations": [
                {
                    "name": "OperationName",
                    "input": [
                        {
                            "name": "username",
                            "type": "String",
                            "validation": "^[a-zA-z]{3,12}$"
                        },
                        "validation_token"
                    ],
                    "output": "userid"
                }
            ]
        }

Client:
    Move to

Server:
    Exceptions:
        Testing (including nested layer catching)
